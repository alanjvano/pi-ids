from picamera.array import PiRGBArray
from picamera import PiCamera
import cv2
import time
import argparse
import warnings
import json
import datetime
import imutils
import uuid
import os
import numpy
import smtplib

# construct the argument parser
parser = argparse.ArgumentParser(description="PiCam IDS")
parser.add_argument("-c", "--conf", required=True, help = "path to the JSON configuration file")
args = vars(parser.parse_args())
print(args)

class TempImage:
	def __init__(self, basePath="./", ext=".jpg"):
		# construct the file path
		self.path = "{base_path}/pi_images/{rand}{ext}".format(base_path=basePath, rand=str(uuid.uuid4()),ext=ext)

	def cleanup(self):
		# remove the file
		os.remove(self.path)

# filter warning and load configuration file
warnings.filterwarnings("ignore")
conf = json.load(open(args["conf"]))

# initialize the camera and variables
camera = PiCamera()
camera.resolution = tuple(conf["resolution"])
camera.framerate = conf["fps"]
rawCapture = PiRGBArray(camera, size = tuple(conf["resolution"]))
print("camera warming up...")
time.sleep(conf["camera_warmup_time"])
avg = None
lastSent = datetime.datetime.now()
motionCounter = 0

# begin camera capture
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
	image = frame.array
	timestamp = datetime.datetime.now()
	text = "none detected"

	# correctly format the frame from processing
	image = imutils.rotate(image, angle=270)
	image = imutils.resize(image, width=500)
	gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
	gray = cv2.GaussianBlur(gray, (21,21), 0)

	# initialize the average frame
	if avg is None:
		print("starting background model...")
		avg = gray.copy().astype("float")
		rawCapture.truncate(0)
		continue

	# accumulate the weighted average between the current and previous
	# frame, then calculte difference between current and running avg
	cv2.accumulateWeighted(gray, avg, 0.5)
	frameDelta = cv2.absdiff(gray, cv2.convertScaleAbs(avg))

	# threshold the delta image, dilate the threshold to fill in holes,
	# then find contours on thresholded image
	thresh = cv2.threshold(frameDelta, conf["delta_thresh"], 255, cv2.THRESH_BINARY)[1]
	thresh = cv2.dilate(thresh, None, iterations=2)
	cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
	cnts = cnts[0] if imutils.is_cv2() else cnts[1]

	# loop over the contours
	for c in cnts:
		# if the contour is too small, ignore it
		if cv2.contourArea(c) < conf["min_area"]:
			continue

		# compute the bounding box for contour and show box+text
		(x,y,w,h) = cv2.boundingRect(c)
		cv2.rectangle(image,(x,y),(x+w,y+h), (0,255,0), 2)
		text = "motion detected"

	# draw the text and timestamp on the frame
	ts = timestamp.strftime("%A %d %B %Y %I:%M:%S%p")
	cv2.putText(image, "Status: {}".format(text), (10,20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
	cv2.putText(image, ts, (10, image.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1)

	if text == "motion detected":
		# check last upload time
		if (timestamp - lastSent).seconds >= conf["min_upload_seconds"]:
			motionCounter += 1

			# check if consistent motion high enough
			if motionCounter >= conf["min_motion_frames"]:
				# save the image to a temporary file
				t = TempImage()
				cv2.imwrite(t.path, image)

				# email the image
				server = smtplib.SMTP('smtp.gmail.com', 587)
				server.startls()
				server.login(
				server.login(conf["email_account"],conf["dest_email_account"], msg)
conf["email_account"],conf["dest_email_account"]				server.quit()

				# update the upload timestamp and reset counter
				lastSent = timestamp
				motionCounter = 0

	else:
		motionCounter = 0

	# check to display on screen
	if conf["show_video"]:
		cv2.imshow("Video Feed", image)
		if cv2.waitKey(1) & 0xff == ord("q"):
			break

	# clear the stream for the next frame
	rawCapture.truncate(0)
